#requires -version 2
<#
.SYNOPSIS
Gets default and fine grained password policies
 
.AUTHOR
Chris Mewett
 
.DESCRIPTION
Queries Active Directory for password policies and outputs data in a CSV file. Initially written for recording / processing by security analytics
 
.PARAMETER verbose
Provide status information as the script runs
 
.PARAMETER OutputLocation
Default: The directory the script is called from.
 
 
 
.INPUTS None
No input is accepted
 
.OUTPUTS CSV file
A Comma Separated Value (CSV) file named [foo]-[string of numbers].csv in the OutputLocation specified
 
.EXAMPLE
Get-foo -outputlocation d:\ -domain example.local
Ouputs CSV to the root of d:\
 
 
 
.LINK
mailto:chris.mewett@
 
 
 
 
.LINK  
http://XX  
 
 
 
#>
 
 
 
 
 
[CmdletBinding()]
Param(
[Parameter(Mandatory=$false,Position=1,ParameterSetName="run")]
[validatescript({ test-path $_ })]
[string]$outputlocation = (get-location).path,
[Parameter(Mandatory=$false,Position=1,ParameterSetName="run")]
[string]$query = 'default',
[Parameter(Mandatory=$false,Position=1,ParameterSetName="run")]
[string]$grouplist,
Parameter(Mandatory=$false,Position=1,ParameterSetName="run")]
[string]$outputfile = ('passwordpolices-' + ( get-date -uformat +-%s ) + '.csv'),
[switch]$lint

)
 
$outputfile = $outputlocation + "\" + $outputfile
 
 
function GenerateReport {
Param (
[Parameter(Mandatory=$true,Position=1)]
[string]$outputlocation,
[Parameter(Mandatory=$true,Position=2)]
[string]$domain
 
)  
	$cwd = (get-location).Path
	$Env:ADPS_LoadDefaultDrive = 0
Import-Module ActiveDirectory
New-PSDrive -name "AD" -root "" -PSProvider ActiveDirectory -server (get-addomain).PDCEmulator
	$Env:ADPS_LoadDefaultDrive = 0
Import-Module ActiveDirectory
New-PSDrive -name "AD" -root "" -PSProvider ActiveDirectory -server (get-addomain).PDCEmulator

$output = New-Object System.Collections.ArrayList

$defaultpolicy = Get-ADDefaultDomainPasswordPolicy

set-location ad:
$fgcontainer = Get-ChildItem (get-addomain).systemscontainer | where-object ObjectClass -eq "msDS-PasswordSettingsContainer"

get-childitem $fgcontainer.DistinguishedName | foreach-object {
    $policy = $_.DistinguishedName

    $obj = get-adobject -property whenChanged,whenCreated,Name,objectClass  $policy
    if ( $obj.objectClass-eq 'msDS-PasswordSettings' ) { $config = Get-ADFineGrainedPasswordPolicy -Identity $policy }
    else {
        # and lo, we looked, and there was a hacky kludge
        $config = New-Object PSCustomObject -Property @{ "error" = "noaccess"
           }
    }
     
    $auditcount = (get-acl -Audit $policy |Select-Object -ExpandProperty audit).count
    $denycount = (get-acl $policy | Select-Object -ExpandProperty access | Where-Object AccessControlType -NE 'Allow').count

    [void]$output.Add((New-Object PSCustomObject -Property @{
        "dn" = $policy;
        "type" = "finegrained";
        "name" = $config.Name;
        "AppliesTo" = $config.AppliesTo; 
           "ComplexityEnabled" = $config.ComplexityEnabled;
            "LockoutDuration" = $config.LockoutDuration;
            "LockoutObservationWindow" = $config.LockoutObservationWindow;
            "LockoutThreshold" = $config.LockoutThreshold;
            "MaxPasswordAge" = $config.MaxPasswordAge;
            "MinPasswordAge" = $config.MinPasswordAge;
            "MinPasswordLength" = $config.MinPasswordLength;
            "PasswordHistoryCount" = $config.PasswordHistoryCount;
            "Precedence" = $config.Precedence;
            "ReversibleEncryptionEnabled" = $config.ReversibleEncryptionEnabled;
            "whenChanged" = $obj.whenChanged;
            "whenCreated" = $obj.whenCreated;
            "objectClass" = $obj.ObjectClass;
            "saclcount" = $auditcount;
            "denycount" = $denycount;
            "error" = $config.error

    }))
}

# add the default policy

    [void]$output.Add((New-Object PSCustomObject -Property @{
        "dn" = $defaultpolicy.DistinguishedName
        "type" = "default";
        "name" = "default";
        "AppliesTo" = "default"; 
           "ComplexityEnabled" = $defaultpolicy.ComplexityEnabled
            "LockoutDuration" = $defaultpolicy.LockoutDuration
            "LockoutObservationWindow" = $defaultpolicy.LockoutObservationWindow;
            "LockoutThreshold" = $defaultpolicy.LockoutThreshold;
            "MaxPasswordAge" = $defaultpolicy.MaxPasswordAge;
            "MinPasswordAge" = $defaultpolicy.MinPasswordAge;
            "MinPasswordLength" = $defaultpolicy.MinPasswordLength;
            "PasswordHistoryCount" = $defaultpolicy.PasswordHistoryCount;
            "Precedence" = "-1";
            "ReversibleEncryptionEnabled" = $defaultpolicy.ReversibleEncryptionEnabled;
            "whenChanged" = "undefined";
            "whenCreated" = "undefined";
            "objectClass" = "undefined";
            "saclcount" = "undefined";
            "denycount" = "undefined";
            "error" = "";
            }))
	set-location $cwd
	$output
}
 






$output | Export-Csv -NoTypeInformation -Path $outputlocation 
set-location $cwd
