#requires -version 2
<#
.SYNOPSIS
  <Overview of script>
.DESCRIPTION
  <Brief description of script>
.PARAMETER <Parameter_Name>
    <Brief description of parameter input required. Repeat this attribute if required>
.INPUTS
  <Inputs if any, otherwise state None>
.OUTPUTS
  <Outputs if any, otherwise state None - example: Log file stored in C:\Windows\Temp\<name>.log>
.NOTES
  Version:        1.0
  Author:         <Name>
  Creation Date:  <Date>
  Purpose/Change: Initial script development
  
.EXAMPLE
  <Example goes here. Repeat this attribute for more than one example>
#>

#---------------------------------------------------------[Initialisations]--------------------------------------------------------

#Set Error Action to Silently Continue
$ErrorActionPreference = "SilentlyContinue"

#Dot Source required Function Libraries
. "C:\Scripts\Functions\Logging_Functions.ps1"

#----------------------------------------------------------[Declarations]----------------------------------------------------------

#Script Version
$sScriptVersion = "1.0"

#Log File Info
$sLogPath = "C:\Windows\Temp"
$sLogName = "<script_name>.log"
$sLogFile = Join-Path -Path $sLogPath -ChildPath $sLogName

#-----------------------------------------------------------[Functions]------------------------------------------------------------





$cwd = (get-location).Path
$outputdir = $cwd
$outputfile = "adpassswordchecks.csv"

$outputlocation = $outputdir + "\" + $outputfile

$Env:ADPS_LoadDefaultDrive = 0
Import-Module ActiveDirectory
New-PSDrive -name "AD" -root "" -PSProvider ActiveDirectory -server (get-addomain).PDCEmulator

$output = New-Object System.Collections.ArrayList

$defaultpolicy = Get-ADDefaultDomainPasswordPolicy

set-location ad:
$fgcontainer = Get-ChildItem (get-addomain).systemscontainer | where-object ObjectClass -eq "msDS-PasswordSettingsContainer"

get-childitem $fgcontainer.DistinguishedName | foreach-object {
    $policy = $_.DistinguishedName

    $obj = get-adobject -property whenChanged,whenCreated,Name,objectClass  $policy
    if ( $obj.objectClass-eq 'msDS-PasswordSettings' ) { $config = Get-ADFineGrainedPasswordPolicy -Identity $policy }
    else {
        # and lo, we looked, and there was a hacky kludge
        $config = New-Object PSCustomObject -Property @{ "error" = "noaccess"
           }
    }
     
    $auditcount = (get-acl -Audit $policy |Select-Object -ExpandProperty audit).count
    $denycount = (get-acl $policy | Select-Object -ExpandProperty access | Where-Object AccessControlType -NE 'Allow').count

    [void]$output.Add((New-Object PSCustomObject -Property @{
        "dn" = $policy;
        "type" = "finegrained";
        "name" = $config.Name;
        "AppliesTo" = $config.AppliesTo; 
           "ComplexityEnabled" = $config.ComplexityEnabled;
            "LockoutDuration" = $config.LockoutDuration;
            "LockoutObservationWindow" = $config.LockoutObservationWindow;
            "LockoutThreshold" = $config.LockoutThreshold;
            "MaxPasswordAge" = $config.MaxPasswordAge;
            "MinPasswordAge" = $config.MinPasswordAge;
            "MinPasswordLength" = $config.MinPasswordLength;
            "PasswordHistoryCount" = $config.PasswordHistoryCount;
            "Precedence" = $config.Precedence;
            "ReversibleEncryptionEnabled" = $config.ReversibleEncryptionEnabled;
            "whenChanged" = $obj.whenChanged;
            "whenCreated" = $obj.whenCreated;
            "objectClass" = $obj.ObjectClass;
            "saclcount" = $auditcount;
            "denycount" = $denycount;
            "error" = $config.error

    }))
}

# add the default policy

    [void]$output.Add((New-Object PSCustomObject -Property @{
        "dn" = $defaultpolicy.DistinguishedName
        "type" = "default";
        "name" = "default";
        "AppliesTo" = "default"; 
           "ComplexityEnabled" = $defaultpolicy.ComplexityEnabled
            "LockoutDuration" = $defaultpolicy.LockoutDuration
            "LockoutObservationWindow" = $defaultpolicy.LockoutObservationWindow;
            "LockoutThreshold" = $defaultpolicy.LockoutThreshold;
            "MaxPasswordAge" = $defaultpolicy.MaxPasswordAge;
            "MinPasswordAge" = $defaultpolicy.MinPasswordAge;
            "MinPasswordLength" = $defaultpolicy.MinPasswordLength;
            "PasswordHistoryCount" = $defaultpolicy.PasswordHistoryCount;
            "Precedence" = "-1";
            "ReversibleEncryptionEnabled" = $defaultpolicy.ReversibleEncryptionEnabled;
            "whenChanged" = "undefined";
            "whenCreated" = "undefined";
            "objectClass" = "undefined";
            "saclcount" = "undefined";
            "denycount" = "undefined";
            "error" = "";
            }))


$output | Export-Csv -NoTypeInformation -Path $outputlocation 
set-location $cwd
